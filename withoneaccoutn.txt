import React, { Component } from 'react';
import firebase from 'firebase';

import './App.css';

class App extends Component {
  // Initialize constructor of the class
  constructor(){
    super();
    this.state = {
      user: null
    };

    // Initialize the methods listener
    this.handleSignInGoogle = this.handleSignInGoogle.bind(this);
    this.handleSignInTwitter = this.handleSignInTwitter.bind(this);
    this.loginWithFacebook = this.loginWithFacebook.bind(this);

    this.handleLogOut = this.handleLogOut.bind(this);

  }

  //
  componentWillMount(){
    firebase.auth().onAuthStateChanged(user => {
      this.setState({user});
    });
  }

  //
  handleSignInGoogle(){
    const provider = new firebase.auth.GoogleAuthProvider();
    firebase.auth().signInWithPopup(provider)
      .then( result => console.log(`${result.user.email} ha iniciado session`))
      .catch( error => console.log(`Error ${error.code}: ${error.message}`));
  }

  handleSignInTwitter(){
    // Using a popup.
    var provider = new firebase.auth.TwitterAuthProvider();
    firebase.auth().signInWithPopup(provider).then(function(result) {
      // For accessing the Twitter API.
      //var token = result.credential.accessToken;
      //var secret = result.credential.secret;
      // The signed-in user info.
      //var user = result.user;
        var user = result.user;
         console.log(user);
    }).catch(function(error){
      console.log(error);
        var errorCode = error.code;
              console.log(errorCode);

        var errorMessage = error.message;
              console.log(errorMessage);

          // The email of the user's account used.
          var email = error.email;
                console.log(email);

          // The firebase.auth.AuthCredential type that was used.
          var credential = error.credential;
                console.log(credential);

        if (errorCode === 'auth/account-exists-with-different-credential') {
          console.log('Email already associated with another account.');
         
          firebase.auth().fetchProvidersForEmail(error.email).then(function(providers){
            console.log(providers[0]);
            //providers returns this array -> ["google.com"]
            // You need to sign in the user to that google account
            // with the same email.
            // In a browser you can call:
            var provider = new firebase.auth.GoogleAuthProvider();
            // provider.setCustomParameters({login_hint: error.email});
            // firebase.auth().signInWithPopup(provider)
            // If you have your own mechanism to get that token, you get it
            // for that Google email user and sign in
            firebase.auth().signInWithPopup(provider).then(function(result) {
              // Remember that the user may have signed in with an account that has a different email
              // address than the first one. This can happen as Firebase doesn't control the provider's
              // sign in flow and the user is free to login using whichever account he owns.
              // Step 4b.
              // Link to Facebook credential.
              // As we have access to the pending credential, we can directly call the link method.
              console.log(result);
            });
          });  
        } else {
          console.log(error);
        }
    });
  }
  
  loginWithFacebook() {  
    const provider = new firebase.auth.FacebookAuthProvider();

    //console.log(provider);
    
    firebase.auth().signInWithPopup(provider).then(function(result) {
      // This gives you a Facebook Access Token.
      var token = result.credential.accessToken;
      console.log(token);
      // The signed-in user info.
      var user = result.user;
      console.log(user);
    }).catch(function(error){
      console.log(error);
        var errorCode = error.code;
              console.log(errorCode);

        var errorMessage = error.message;
              console.log(errorMessage);

          // The email of the user's account used.
          var email = error.email;
                console.log(email);

          // The firebase.auth.AuthCredential type that was used.
          var credential = error.credential;
                console.log(credential);

        if (errorCode === 'auth/account-exists-with-different-credential') {
          console.log('Email already associated with another account.');
         
          firebase.auth().fetchProvidersForEmail(error.email).then(function(providers){
            console.log(providers[0]);
            //providers returns this array -> ["google.com"]
            // You need to sign in the user to that google account
            // with the same email.
            // In a browser you can call:
            var provider = new firebase.auth.GoogleAuthProvider();
            // provider.setCustomParameters({login_hint: error.email});
            // firebase.auth().signInWithPopup(provider)
            // If you have your own mechanism to get that token, you get it
            // for that Google email user and sign in
            firebase.auth().signInWithPopup(provider).then(function(result) {
              // Remember that the user may have signed in with an account that has a different email
              // address than the first one. This can happen as Firebase doesn't control the provider's
              // sign in flow and the user is free to login using whichever account he owns.
              // Step 4b.
              // Link to Facebook credential.
              // As we have access to the pending credential, we can directly call the link method.
              console.log(result);
            });
          });  
        } else {
          console.log(error);
        }
    });
  }

  //
  handleLogOut(){
    firebase.auth().signOut()
      .then( result => console.log(`Ha cerrado sesiÃ³n`))
      .catch( error => console.log(`Error ${error.code}: ${error.message}`));
  }

  renderUser () {
    if(this.state.user){
      return (
        <div className="card">
            <img src={this.state.user.photoURL} alt="John" width='100%' /> 
            <div className="card-container">
              <h1>{this.state.user.displayName}</h1>
              <p>
                <button className='card-button' onClick={this.handleLogOut} >
                  Logout
                </button>
              </p>
            </div>
        </div>
      );
    }else{
      return (
        <div className="container">
            <div className="fb-icon-bg"></div>
            <div className="fb-bg" onClick={this.loginWithFacebook}></div>
            <div className="twi-icon-bg"></div>
            <div className="twi-bg" onClick={this.handleSignInTwitter}></div>
            <div className="g-icon-bg"></div>
            <div className="g-bg" onClick={this.handleSignInGoogle}></div>
        </div>
      );
    }
  }

  render() {
    return (
      <div className="app">
        {this.renderUser()}
      </div>
    );
  }
}

export default App;
